{{Header}}

using System;
using System.Threading.Tasks;
using {{ApiProjectName}}.Models.{{ModelNamePlural}};
using FluentAssertions;
using Force.DeepCloner;
using Moq;
using Xunit;

namespace {{NameSpace}}
{
    public partial class {{ModelName}}ServiceTests
    {
        [Fact]
        public async Task ShouldRemove{{ModelName}}ByIdAsync()
        {
            // given
            Guid random{{ModelName}}Id = Guid.NewGuid();
            Guid input{{ModelName}}Id = random{{ModelName}}Id;
            {{ModelName}} random{{ModelName}} = CreateRandom{{ModelName}}();
            {{ModelName}} storage{{ModelName}} = random{{ModelName}};
            {{ModelName}} expectedInput{{ModelName}} = storage{{ModelName}};
            {{ModelName}} deleted{{ModelName}} = expectedInput{{ModelName}};
            {{ModelName}} expected{{ModelName}} = deleted{{ModelName}}.DeepClone();

            this.storageBrokerMock.Setup(broker =>
                broker.Select{{ModelName}}ByIdAsync(input{{ModelName}}Id))
                    .ReturnsAsync(storage{{ModelName}});

            this.storageBrokerMock.Setup(broker =>
                broker.Delete{{ModelName}}Async(expectedInput{{ModelName}}))
                    .ReturnsAsync(deleted{{ModelName}});

            // when
            {{ModelName}} actual{{ModelName}} = await this.{{modelName}}Service
                .Remove{{ModelName}}ByIdAsync(input{{ModelName}}Id);

            // then
            actual{{ModelName}}.Should().BeEquivalentTo(expected{{ModelName}});

            this.storageBrokerMock.Verify(broker =>
                broker.Select{{ModelName}}ByIdAsync(input{{ModelName}}Id), Times.Once);

            this.storageBrokerMock.Verify(broker =>
                broker.Delete{{ModelName}}Async(expectedInput{{ModelName}}), Times.Once);

            this.storageBrokerMock.VerifyNoOtherCalls();
            this.loggingBrokerMock.VerifyNoOtherCalls();
            this.dateTimeBrokerMock.VerifyNoOtherCalls();
        }
    }
}
