{{Header}}

using System;
using System.Threading.Tasks;
using {{ApiProjectName}}.Models.{{ModelNamePlural}};
using FluentAssertions;
using Force.DeepCloner;
using Moq;
using Xunit;

namespace {{NameSpace}}
{
    public partial class {{ModelName}}ServiceTests
    {
        [Fact]
        public async Task ShouldRetrieve{{ModelName}}ByIdAsync()
        {
            //given
            Guid random{{ModelName}}Id = Guid.NewGuid();
            Guid input{{ModelName}}Id = random{{ModelName}}Id;
            {{ModelName}} random{{ModelName}} = CreateRandom{{ModelName}}();
            {{ModelName}} storage{{ModelName}} = random{{ModelName}};
            {{ModelName}} excpected{{ModelName}} = random{{ModelName}}.DeepClone();

            this.storageBrokerMock.Setup(broker =>
                broker.Select{{ModelName}}ByIdAsync(input{{ModelName}}Id)).ReturnsAsync(storage{{ModelName}});

            //when
            {{ModelName}} actuall{{ModelName}} = await this.{{modelName}}Service.Retrieve{{ModelName}}ByIdAsync(input{{ModelName}}Id);

            //then
            actuall{{ModelName}}.Should().BeEquivalentTo(excpected{{ModelName}});

            this.storageBrokerMock.Verify(broker =>
                broker.Select{{ModelName}}ByIdAsync(input{{ModelName}}Id), Times.Once());

            this.storageBrokerMock.VerifyNoOtherCalls();
            this.dateTimeBrokerMock.VerifyNoOtherCalls();
            this.loggingBrokerMock.VerifyNoOtherCalls();
        }
    }
}